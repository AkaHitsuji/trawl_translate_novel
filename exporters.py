import re
import json
import traceback
import logging
from typing import Dict, List
from ebooklib import epub
from base import BaseExporter

# Configure logging
logger = logging.getLogger(__name__)

class EpubExporter(BaseExporter):
    def __init__(self, book_id: str) -> None:
        self.book_id = book_id
        self.book_title = self._format_title()
        logger.debug(f"Initialized EpubExporter with book_id: {book_id}")

    def export_epub(self, cover_page: bytes, book_info: Dict, book_content: Dict):
        try:
            logger.debug("Starting export_epub method...")
            logger.debug(f"Book info: {json.dumps(book_info, indent=2)}")
            logger.debug(f"Number of chapters: {len(book_content)}")
            
            # Create a new EPUB book
            book = epub.EpubBook()
            logger.debug("Created EpubBook instance")

            # Set metadata
            book.set_title(self.book_title)
            book.set_language("en")
            book.add_author(book_info.get("Author"))
            book.add_metadata("DC", "publisher", book_info.get("Source"))
            book.add_metadata("DC", "subject", book_info.get("Genre"))
            book.add_metadata(
                "DC", "contributor", f"{book_info.get('Author')}+', '+'Akahitsuji'"
            )
            logger.debug("Added metadata to book")

            # cover page
            try:
                logger.debug(f"Cover page size: {len(cover_page)} bytes")
                cover_image = epub.EpubItem(
                    uid="cover",
                    file_name="cover.jpg",
                    media_type="image/jpeg",
                    content=cover_page,
                )
                book.add_item(cover_image)
                logger.debug("Added cover image to book")
            except Exception as e:
                logger.error(f"Error adding cover image: {str(e)}")
                logger.debug(traceback.format_exc())

            # Create introduction chapter
            try:
                intro_description = book_info.get("description", "")
                logger.debug(f"Intro description length: {len(intro_description) if intro_description else 0}")
                
                intro_content = intro_description.replace("\n", "<br/>") if intro_description else ""
                watermark = "<p><i>Downloaded and generated by Akahitsuji</i></p>"
                
                chapter_intro_content = f"<h1>Introduction</h1>{watermark}<p>{intro_content}</p>"
                logger.debug(f"Introduction content length: {len(chapter_intro_content)}")
                
                chapter_intro = epub.EpubHtml(
                    title="Introduction",
                    file_name="intro.xhtml",
                    content=chapter_intro_content,
                )
                book.add_item(chapter_intro)
                logger.debug("Added introduction chapter to book")
            except Exception as e:
                logger.error(f"Error adding introduction: {str(e)}")
                logger.debug(traceback.format_exc())

            # Add chapters to the EPUB
            chapter_items = []
            try:
                logger.debug("Starting to add chapters...")
                chapter_count = 0
                
                for chapter_title, chapter_content in book_content.items():
                    try:
                        chapter_count += 1
                        logger.debug(f"Processing chapter {chapter_count}: {chapter_title}")
                        logger.debug(f"Chapter content length: {len(chapter_content) if chapter_content else 0}")
                        
                        # Skip empty content
                        if not chapter_content or chapter_content.strip() == "":
                            print(f"WARNING: Skipping empty chapter {chapter_title}")
                            continue
                        
                        # sanitise % from title and clean up the filename
                        chapter_title = chapter_title.replace("%", "percent")
                        safe_filename = re.sub(r'[^\w\-_\. ]', '_', chapter_title)
                        file_name = f"{safe_filename}.xhtml"
                        logger.debug(f"Safe filename: {file_name}")

                        # Format chapter content
                        chapter_content_formatted = chapter_content.replace("\n", "<br/>")
                        html_content = f"<h1>{chapter_title}</h1><p>{chapter_content_formatted}</p>"
                        logger.debug(f"HTML content length: {len(html_content)}")
                        
                        # Create chapter object
                        chapter = epub.EpubHtml(
                            title=chapter_title, 
                            file_name=file_name, 
                            lang="en"
                        )
                        chapter.set_content(html_content)
                        
                        # Add chapter to the book
                        book.add_item(chapter)
                        chapter_items.append(chapter)
                        logger.debug(f"Added chapter {chapter_count} to book")
                    except Exception as e:
                        logger.error(f"Error processing chapter {chapter_title}: {str(e)}")
                        logger.debug(traceback.format_exc())
                
                logger.debug(f"Successfully added {len(chapter_items)} chapters to the book")
            except Exception as e:
                logger.error(f"Error in chapter processing loop: {str(e)}")
                logger.debug(traceback.format_exc())

            # Add default stylesheet
            try:
                style = """body { font-family: Arial, sans-serif; } h1 { color: #333; } p { margin: 1em 0; }"""
                style_file = epub.EpubItem(
                    uid="style", file_name="style.css", media_type="text/css", content=style
                )
                book.add_item(style_file)
                logger.debug("Added stylesheet to book")
            except Exception as e:
                logger.error(f"Error adding stylesheet: {str(e)}")
                logger.debug(traceback.format_exc())

            # Add navigation file
            try:
                nav = epub.EpubNav()
                book.add_item(nav)
                logger.debug("Added navigation file to book")
            except Exception as e:
                logger.error(f"Error adding navigation: {str(e)}")
                logger.debug(traceback.format_exc())

            # Define the spine (order of chapters)
            try:
                # Do not include style_file in spine, it's not content
                book.spine = ["nav", chapter_intro] + chapter_items
                logger.debug(f"Set spine with {len(book.spine)} items")
                
                # Debug spine contents
                logger.debug("Spine contents:")
                for i, item in enumerate(book.spine):
                    if isinstance(item, str):
                        logger.debug(f"  {i}: {item} (string)")
                    else:
                        logger.debug(f"  {i}: {item.title} (file: {item.file_name})")
            except Exception as e:
                logger.error(f"Error setting spine: {str(e)}")
                logger.debug(traceback.format_exc())

            # Add a Table of Contents (TOC)
            try:
                book.toc = [epub.Link("intro.xhtml", "Introduction", "intro")]
                
                for chapter in chapter_items:
                    book.toc.append(epub.Link(chapter.file_name, chapter.title, chapter.file_name))
                
                logger.debug(f"Set TOC with {len(book.toc)} items")
            except Exception as e:
                logger.error(f"Error setting TOC: {str(e)}")
                logger.debug(traceback.format_exc())

            # Write to the EPUB file
            try:
                output_file = f"{self.book_id}.epub"
                print(f"Writing EPUB to file: {output_file}")
                epub.write_epub(output_file, book, {})
                print(f"Successfully saved epub for {self.book_id}")
            except Exception as e:
                logger.error(f"Error writing EPUB file: {str(e)}")
                logger.debug(traceback.format_exc())
                
                # Debug the items in the book
                logger.debug("\nDEBUG: Checking all items in the book:")
                for i, item in enumerate(book.items):
                    try:
                        item_type = type(item).__name__
                        logger.debug(f"Item {i}: type={item_type}")
                        
                        if hasattr(item, 'file_name'):
                            logger.debug(f"  file_name: {item.file_name}")
                        
                        if hasattr(item, 'content') and item.content is not None:
                            content_len = len(item.content) if isinstance(item.content, (bytes, str)) else "non-string/bytes"
                            logger.debug(f"  content length: {content_len}")
                        else:
                            logger.debug("  content: None or not available")
                            
                        # For EpubHtml items, check if content is empty
                        if isinstance(item, epub.EpubHtml):
                            body_content = item.get_body_content()
                            logger.debug(f"  body_content length: {len(body_content) if body_content else 0}")
                            if not body_content or len(body_content) == 0:
                                print(f"WARNING: Empty body content in {item.file_name}")
                    except Exception as e:
                        logger.debug(f"  Error inspecting item {i}: {str(e)}")
                
                raise
        except Exception as e:
            logger.error(f"Fatal error in export_epub: {str(e)}")
            logger.debug(traceback.format_exc())
            raise

    def _format_title(self):
        # Replace hyphens with spaces
        title = self.book_id
        title = title.replace("-", " ")
        title = title.title()
        return title


# # Example usage
# chapters_dir = 'path_to_your_chapter_files'  # Replace with your directory containing text files
# epub_filename = 'output_book.epub'
# create_epub_from_chapters(chapters_dir, epub_filename)
